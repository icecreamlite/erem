#!/usr/bin/env python3

import requests
from requests.auth import HTTPDigestAuth
import os
import subprocess
import sys

def clear():
	subprocess.call(['clear'])

conf_dir = '/home/icecreamlite/PyScripts/erem/erem.conf'

def ipIsValid(ip):
	ip = ip.split('.')
	if len(ip) != 4: return False
	if ip[0] != '192': return False
	if ip[1] != '168': return False
	try: ip[2] = int(ip[2])
	except: return False
	if ip[2] < 0 or ip[2] > 255: return False
	try: ip[3] = int(ip[3])
	except: return False
	if ip[3] < 0 or ip[3] > 255: return False
	return True

if not os.path.isfile(conf_dir):
	while True:
		clear()
		conf = []
		conf.append(input('Username: '))
		conf.append(input('Password: '))

		while True:
			ip = input('IP: ')
			if ipIsValid(ip):
				conf.append(ip)
				break
			print('Invalid IP')

		if input('Proceed? (y/n) ') == 'y': break

	with open(conf_dir, 'w') as f:
		f.write('\n'.join(conf) + '\n')

def setCred():
	if len(sys.argv) != 4: return 'usage'

	with open(conf_dir) as f:
		content = f.readlines()

	content[0] = sys.argv[2] + '\n'
	content[1] = sys.argv[3] + '\n'

	try: os.remove(conf_dir)
	except: pass

	with open(conf_dir, 'w') as f:
		f.writelines(content)

	return 'Credentials changed successfully'


def setIp():
	if len(sys.argv) != 3: return 'usage'

	ip = sys.argv[2]

	while True:
		if ipIsValid(ip): break
		print('Invalid IP')
		ip = input('IP: ')

	with open(conf_dir) as f:
		content = f.readlines()

	content[2] = (ip + '\n')

	try: os.remove(conf_dir)
	except: pass

	with open(conf_dir, 'w') as f:
		f.writelines(content)

	return 'IP changed successfully'

def togLight():
	with open(conf_dir) as f:
		content = f.readlines()
	try:
		res = requests.get('http://' + content[2].rstrip('\n') + '/et?l', auth = HTTPDigestAuth(content[0].rstrip('\n'), content[1].rstrip('\n')))
	except:
		return 'An error occured'

	if res.status_code != 200: return res.status_code

	return 'Light toggled'

def togFan():
	with open(conf_dir) as f:
		content = f.readlines()
	try:
		res = requests.get('http://' + content[2].rstrip('\n') + '/et?f', auth = HTTPDigestAuth(content[0].rstrip('\n'), content[1].rstrip('\n')))
	except:
		return 'An error occured'

	if res.status_code != 200: return res.status_code

	return 'Fan toggled'

def ableFanAuto():
	if len(sys.argv) != 3: return 'usage'
	state = sys.argv[2]
	if state != 'enable' and state != 'disable': return 'usage'

	with open(conf_dir) as f:
		content = f.readlines()
	try:
		res = requests.get('http://' + content[2].rstrip('\n') + '/et?fa=' + state, auth = HTTPDigestAuth(content[0].rstrip('\n'), content[1].rstrip('\n')))
	except:
		return 'An error occured'

	if res.status_code != 200: return res.status_code

	return 'Fan auto ' + state + 'd'

def timeIsValid(time):
	time = time.split(':')

	if len(time) != 2: return False
	if len(time[0]) != 2: return False
	if len(time[1]) != 2: return False

	if time[0][0] == '0': time[0] = time[0][1]

	try: time[0] = int(time[0])
	except: return False

	if time[0] < 0 or time[0] > 23: return False

	if time[1][0] == '0': time[1] = time[1][1]

	try: time[1] = int(time[1])
	except: return False

	if time[1] < 0 or time[1] > 59: return False

	return True

def setFaon():
	if len(sys.argv) != 3: return 'usage'

	time = sys.argv[2]

	while(True):
		if timeIsValid(time): break
		print('Invalid time')
		time = input('Fan auto-on time: (HH:MM) ')

	with open(conf_dir) as f:
		content = f.readlines()

	try:
		res = requests.get('http://' + content[2].rstrip('\n') + '/et?faon=' + time, auth = HTTPDigestAuth(content[0].rstrip('\n'), content[1].rstrip('\n')))
	except:
		return 'An error occured'

	if res.status_code != 200: return res.status_code

	return 'Fan auto-on time set successfully'

def setFaof():
	if len(sys.argv) != 3: return 'usage'

	time = sys.argv[2]

	while(True):
		if timeIsValid(time): break
		print('Invalid time')
		time = input('Fan auto-off time: (HH:MM) ')

	with open(conf_dir) as f:
		content = f.readlines()
	try:
		res = requests.get('http://' + content[2].rstrip('\n') + '/et?faof=' + time, auth = HTTPDigestAuth(content[0].rstrip('\n'), content[1].rstrip('\n')))
	except:
		return 'An error occured'

	if res.status_code != 200: return res.status_code

	return 'Fan auto-off time set successfully'

def showConf():
	with open(conf_dir) as f:
		content = f.readlines()

	return ''.join(content)

switcher = {
	'cred': setCred,
	'ip': setIp,
	'l': togLight,
	'f': togFan,
	'fa': ableFanAuto,
	'faon': setFaon,
	'faof': setFaof,
	'conf': showConf,
}

if len(sys.argv) > 1:
	func = switcher.get(sys.argv[1], 'not found')
	if func != 'not found':
		result = func()
		if result != 'usage':
			print(result)
			exit()

print("""
erem [options]

Options:
cred {username} {password} - change credentials for webserver
ip {ip address} - change ip for webserver
l - toggle light
f - toggle fan
fa {enable|disable} - Enable/disable fan auto-on/off
faon {HH:MM} - set fan auto-on time (24-hr format)
faof {HH:MM} - set fan auto -off time (24-hr format)
conf - show erem config file
""")
